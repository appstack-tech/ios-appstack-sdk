// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AppstackSDK
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AdAttributionKit
import AdServices
import AdSupport
@_exported import AppstackSDK
import Foundation
import StoreKit
import Swift
import _AdAttributionKit_StoreKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers public class AppstackAttributionSdk : @unchecked Swift.Sendable {
  public static var shared: AppstackSDK.AppstackAttributionSdk
  #if compiler(>=5.3) && $NonescapableTypes
  public func configure(apiKey appstackApiKey: Swift.String, isDebug: Swift.Bool = false, endpointBaseUrl: Swift.String? = nil, logLevel: AppstackSDK.LogLevel = .info)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func sendEvent(event: AppstackSDK.EventType, name: Swift.String? = nil, revenue: Swift.Double? = nil)
  #endif
  @objc deinit
}
extension AppstackSDK.AppstackAttributionSdk {
  public func resetApiKeyState()
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAppstackId() -> Swift.String?
  #endif
  public func isSdkDisabled() -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, macOS 12.0, macCatalyst 15.0, *)
final public class AppstackASAAttribution {
  public static var shared: AppstackSDK.AppstackASAAttribution
  final public func enableAppleAdsAttribution()
  final public func disableASAAttributionTracking()
  @objc deinit
}
public enum EventType : Swift.String, Swift.CaseIterable {
  case INSTALL
  case LOGIN
  case SIGN_UP
  case REGISTER
  case PURCHASE
  case ADD_TO_CART
  case ADD_TO_WISHLIST
  case INITIATE_CHECKOUT
  case START_TRIAL
  case SUBSCRIBE
  case LEVEL_START
  case LEVEL_COMPLETE
  case TUTORIAL_COMPLETE
  case SEARCH
  case VIEW_ITEM
  case VIEW_CONTENT
  case SHARE
  case CUSTOM
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias AllCases = [AppstackSDK.EventType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [AppstackSDK.EventType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension AppstackSDK.EventType {
  public var eventName: Swift.String {
    get
  }
}
public struct UserData : Swift.Codable, Swift.Equatable {
  public let appId: Swift.String
  public let clientFingerprint: Swift.String
  public let timestamp: Swift.String
  public let expiresAt: Swift.String
  public let redirectionUrl: Swift.String
  public let deeplinkId: Swift.String
  public let gclid: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(appId: Swift.String, clientFingerprint: Swift.String, timestamp: Swift.String, expiresAt: Swift.String, redirectionUrl: Swift.String, deeplinkId: Swift.String, gclid: Swift.String? = nil)
  #endif
  public static func == (a: AppstackSDK.UserData, b: AppstackSDK.UserData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LogLevel : Swift.Int {
  case off
  case error
  case debug
  case info
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AppstackSDK.EventType : Swift.Equatable {}
extension AppstackSDK.EventType : Swift.Hashable {}
extension AppstackSDK.EventType : Swift.RawRepresentable {}
extension AppstackSDK.LogLevel : Swift.Equatable {}
extension AppstackSDK.LogLevel : Swift.Hashable {}
extension AppstackSDK.LogLevel : Swift.RawRepresentable {}
